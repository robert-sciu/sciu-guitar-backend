#!/usr/bin/env node
require("dotenv").config();
const logger = require("../utilities/logger");
/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("gitara-lekcje-server:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

const db = require("../models");
async function initApp() {
  logger.debug("testing database connection");
  try {
    await db.sequelize.authenticate();
    logger.info("database connected successfully");
    await db.sequelize.sync({ force: true });
    logger.info("database synced successfully");
    const { insertSampleData } = require("../data/init");
    await insertSampleData();
  } catch (error) {
    logger.error(error);
    process.exit(1);
  }
  const dailyTask = require("../cron/dailyTasks");

  server.listen(port, "0.0.0.0");
  server.on("error", onError);
  server.on("listening", onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

initApp();
